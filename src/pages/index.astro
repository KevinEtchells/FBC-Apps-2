---

    const response = await fetch('https://api-eu-west-2.hygraph.com/v2/clmu9tfgf0nkb01t83ihb5eix/master',
        {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify({
                query: `
                    {
                        sections {
                            name
                            items (first: 100) {
                                title
                                information {
                                    json
                                }
                            }
                        }
                        assets (first: 100) {
                            altText
                            fileName
                        }
                    }
                `
            })
        }
    );
    const data = (await response.json()).data;

    const getAltText = (src: string) => {
        let altText = '';
        data.assets.forEach((asset) => {
            if (asset.fileName.replace(/\..+/g, '').indexOf(src.replace(/\..+/g, '')) !== -1) {
                altText = asset.altText;
            }
        });
        return altText;
    };

---

<!doctype html>
<html lang="en">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="/av-checklist.webmanifest"/>
        <link rel="icon" type="image/png" href="/app-icon.png">
        <title>AV Checklist</title>
        <style>

            * {box-sizing: border-box;}
            body {font-family: sans-serif; margin: 0;}

            header div, main {max-width: 40rem; margin: 0 auto;}

            header {background-color: white; border-bottom: 2px solid #ddd; left: 0; position: fixed; top: 0; width: 100%; z-index: 10;}
            header div {align-items: center; display: flex; padding: 0.5rem 1rem 0.5rem 0.5rem;}
            header h1 {margin: 0; margin-left: 0.5rem;}
            
            main {padding: 1rem; padding-top: 3.75rem;}

            summary {cursor: pointer; font-size: 1rem; margin-bottom: 0.375rem; margin-top: 1.5rem;}
            summary::marker {color: #e52386;}
            summary h2 {display: inline-block; font-size: 1.5rem; margin: 0; padding-left: 0.25rem; vertical-align: middle;}
            ul {list-style-type: none; margin: 0; padding: 0;}
            li {border-bottom: 1px solid #ddd; display: flex; padding: 0.375rem 0;}

            a {color: #e52386; font-weight: bold; text-underline-offset: 0.25rem;}

            label {align-items: center; display: flex; flex-grow: 1; font-size: 1.125rem; justify-content: space-between; line-height: 1.3;}
            label > span {margin-right: 1.375rem;}
            .info-button {position: relative;}
            .info-button a {font-size: 1.5rem; font-weight: 400; left: 0.375rem; position: absolute; text-decoration: none; top: -0.25rem;}
            input[type='checkbox'] {accent-color: #e52386; cursor: pointer; flex-shrink: 0; height: 2rem; width: 2rem;}

            .info {display: none; line-height: 1.3; padding-top: 0.5rem;}
            .info a {display: block; margin-top: 1.5rem;}
            .info img {display: block; margin: 1rem auto; max-height: 36vh; max-width: 80%;}

        </style>
    </head>
    <body>

        <header>
            <div>
                <img height="48" width="48" src="/app-icon.png" alt=""/>
                <h1>AV Checklist</h1>
            </div>
        </header>
        
        <main>

            <div data-page="main">
                
                {data.sections.map((section, sectionIndex) => (
                    <details open>
                        <summary>
                            <h2>{section.name}</h2>
                        </summary>
                        <ul>
                            {section.items.map((item, itemIndex) => (
                                <li>
                                    <label>
                                        <span>
                                            {item.title}
                                            {/* the 2nd check here is incase there's an empty text field for description */}
                                            {item.information && (item.information.json.children[0].type !== 'paragraph' || item.information.json.children[0].children[0].text.trim()) && 
                                                <span class="info-button">
                                                    <a aria-label={'information - ' + item.title} href={'#info-' + sectionIndex + '-' + itemIndex} onclick={"changePage('info-" + sectionIndex + "-" + itemIndex + "')"}>&#9432;</a>
                                                </span>
                                            }
                                        </span>
                                        <input type="checkbox"/>
                                    </label>
                                </li>
                            ))}
                        </ul>
                    </details>
                ))}

            </div>


            {/* Information overlays */}
            {data.sections.map((section, sectionIndex) => (
                <>
                    {section.items.map((item, itemIndex) => (
                        <>
                            {item.information &&
                                <div class="info" data-page={'info-' + sectionIndex + '-' + itemIndex}>
                                    <h3>{item.title}</h3>
                                    {item.information.json.children.map((infoItem) => (
                                        <>
                                            {infoItem.type === 'paragraph' &&
                                                <p>{infoItem.children[0].text}</p>
                                            }
                                            {infoItem.type === 'image' && 
                                                <img src={infoItem.src} alt={getAltText(infoItem.title)} loading="lazy"/>
                                            }
                                        </>
                                    ))}
                                    <a href="#" onclick="changePage('main')">Back to checklist</a>
                                </div>
                            }
                        </>
                    ))}
                </>
            ))}

        </main>

        <script is:inline src="https://fbc-apps.web.app/happynappies/js/firebase-4.5.0.js"></script>
        <script is:inline src="https://fbc-apps.web.app/happynappies/js/firebase-firestore-4.5.0.js"></script>
        <script is:inline>

            firebase.initializeApp({
                apiKey: 'AIzaSyAVBjYlfhbzd9eHJakG-fMu768qm03S6js',
                authDomain: 'fbc-apps.firebaseapp.com',
                databaseURL: 'https://fbc-apps.firebaseio.com',
                projectId: 'fbc-apps'
            });

            let db = firebase.firestore().collection('av-checklist');

            const checkboxes = document.querySelectorAll("input[type='checkbox']");

            db.onSnapshot(data => {
                data.docs.forEach(item => {
                    const index = parseInt(item.id.replace('checkbox', ''));
                    // check number of checkboxes, incase the total qty gets reduced
                    if (checkboxes.length > index) {
                        checkboxes[index].checked = item.data().checked;
                    }
                });
            });

            for (let i = 0; i < checkboxes.length; i++) {
                checkboxes[i].addEventListener('click', evt => {
                    db.doc(`checkbox${i}`).set({
                        checked: evt.target.checked
                    });
                });
            }

            const changePage = (() => {
                let elements = document.querySelectorAll('[data-page]');
                return (page) => {
                    for (let i = 0; i < elements.length; i++) {
                        if (elements[i].getAttribute('data-page') === page) {
                            elements[i].style.display = 'block';
                            
                            // track info-page views (64 characters max)
                            if (page !== 'main' && typeof(cronitor) !== 'undefined') {
                                const eventName = `info-page__${elements[i].querySelector('h3').innerText}`.replace(/ /g, '_').replace(/[^a-zA-Z0-9_-]/g, '').substr(0, 64);
                                cronitor('track', eventName);
                            }

                        } else {
                            elements[i].style.display = 'none'; 
                        }
                    }
                };
            })();

            window.addEventListener('popstate', (evt) => {
                let newPage = window.location.hash.replace('#', '');
                if (!newPage) {
                    newPage = 'main';
                }
                changePage(newPage);
            });

            // log section toggles
            (() => {
                let elements = document.querySelectorAll('details');
                for (let i = 0; i < elements.length; i++) {
                    let element = elements[i];
                    element.addEventListener('toggle', () => {
                        if (typeof(cronitor) !== 'undefined') {
                            const eventName = `toggle-section__${element.querySelector('details h2').innerText}`;
                            cronitor('track', eventName);
                        }
                    });
                }
            })();

        </script>

        
        <script is:inline src="/upup.min.js"></script>
        <script is:inline>
            UpUp.start({
                "cache-version": "v0.25",
                "content-url": "/"
            });
        </script>

        
        <script is:inline async src="https://rum.cronitor.io/script.js"></script>
        <script is:inline>
            window.cronitor = window.cronitor || function() { (window.cronitor.q = window.cronitor.q || []).push(arguments); };
            cronitor('config', { clientKey: 'ac45c92ab5df8ac6c696c5ce8154f16c' });
        </script>

    </body>
</html>